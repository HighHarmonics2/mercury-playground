{
  "-tutorials": "// Welcome to the Mercury Playground ^^\n// click \"play\" to execute the code\n// and adjust the code below:\n\nlist kickBeat [1 0.01 0.1 1 0]\nnew sample kick_house time(1/16) play(kickBeat)\n\nlist hatBeat euclid(16 7)\nnew sample hat_909 time(1/16) play(hatBeat) pan(0.5)\n\nnew sample snare_hvy time(1 3/4)\n\nlist positions sineFloat(16 6.523 0 0.6)\nlist pitch repeat([2 1 1 0.84 0.94] 16)\nnew sample chimes_l time(1/16) shape(1 70 5) name(stut)\n\tset stut offset(positions) pan(random) gain(1) speed(pitch)\n",
  "000-intro": "// === TUTORIAL 000: Intro ===\n// Welcome to the Mercury tutorial ^^\n// These short tutorials will teach you all everything \n// that you can do with this environment\n\n// Lines starting with '//' are comments and are not part of the code\n// You can (un)comment coded lines with Option+/ (or by deleting the //)\n\n// Uncomment the line below and click 'play' above\n// new sample harp_up time(1)\n// Now comment the line and click 'play' again",
  "101-sample": "// === TUTORIAL 101: Sample ===\n// You can play a soundfile with 'new sample' \n// followed by the samplename, for example: kick_909\n// Start the code with 'play' or Alt+Enter\n// Stop the sound with 'silence' or Alt+.\n\nnew sample kick_909\n// Try some other sounds like: hat_909, chimes, kalimba_e\n// You can find all the sounds by clicking 'sounds'",
  "102-time": "// === TUTORIAL 102: Time ===\n// You can change how often a sound is played\n// in one measure/bar.\n// For example 1/4 means 4 times per measure\n// And 1/16 means 16 times per measure\n\nnew sample kick_909 time(1/4)\n// Try for example: 1/8, 3/16, 5/32, 1/100",
  "103-sounds": "// === TUTORIAL 103: Sounds ===\n// You can use multiple sounds simply by coding\n// extra lines that each start with 'new sample'\n\nnew sample kick_909 time(3/8)\nnew sample hat_909 time(1/8)\nnew sample snare_909 time(1/2)\n\n// Try various time() arguments and add extra sounds",
  "104-tempo": "// === TUTORIAL 104: Tempo ===\n// We can change the tempo and other settings\n// with the 'set' keyword\n\nset tempo 115\n\nnew sample kick_808_dist time(3/8)\nnew sample hat_808 time(1/16)\nnew sample snare_808 time(1/2)\n\n// Some genres are defined by there own bpm range\n// Try for example tempo 86 for HipHop, \n// or 162 for Drum'n'Bass styles",
  "105-offset": "// === TUTORIAL 105: Offset ===\n// We can keep the time interval the same, but play \n// sounds at a different position in the bar by \n// using a second argument for the offset\n\nnew sample kalimba_g time(1)\nnew sample kalimba_a time(1 3/16)\nnew sample kalimba_e time(1 3/8)\n\n// These sounds all play 1 time per measure\n// one starts at offset 0, one at 3/16 and one at 3/8\n// Try different offsets like 1/16, 3/4, 1/32",
  "106-rhythm": "// === TUTORIAL 106: Rhythm ===\n// With a list we can make more complex patterns \n// like a beat of 1's and 0's\n// A list is just a collection of numbers (or words)\n\nlist hatBeat [1 0 1 0 0 1 0 1]\nnew sample hat_808 time(1/16) play(hatBeat)\n\n// 1 means play the sounds, a 0 means skip it\n// Try changing the values and length of the list \n// For example: [1 0 1 1 0]",
  "107-beat": "// === TUTORIAL 107: Beat ===\n// We can create multiple rhythms for different instruments \n// with lists of various lengths to create an interesting beat\n// Here the rhythm of the hihat is 7 long, and the tabla 5\n\nlist hatBeat [1 0 1 0 0 1 0]\nnew sample hat_909 time(1/16) play(hatBeat)\n\nlist tablaBeat [1 0 1 1 0]\nnew sample tabla_mid time(1/16) play(tablaBeat)\n\n// Try different rhythms combined with different times",
  "108-linear": "// === TUTORIAL 108: Linear ===\n// We can also create a list of sound names instead\n// to let one sample play the files sequencially\n\nlist sounds [kick_909 hat_909 snare_909 hat_909]\nnew sample sounds time(1/8)\n\n// Try adding or removing some sound names\n// For example add tabla_mid to the list",
  "109-linear-beat": "// === TUTORIAL 109: Linear Beat ===\n// We can now combine a list of sounds with a list of beats\n// and add an extra sample 1/4th of the time to make a steady beat\n\nset tempo 114\n\nlist sounds [hat_909 snare_909 hat_909 tabla_mid tabla_hi]\nlist beat [1 0 1 0 1 1]\nnew sample sounds time(1/16) play(beat)\n\nnew sample kick_909 time(1/4)\n\n// It gradually becomes more complex and interesting\n// Try different combinations of beats, sounds and time",
  "110-polyrhythm": "// === TUTORIAL 110 Polyrhythm ===\n// We can also create a so called polyrhythm with time()\n// A polyrhythm is a composite rhythm of different timing\n// intervals within a measure\n\nnew sample kalimba_e time(1)\nnew sample kalimba_g time(1/3)\nnew sample kalimba_cis time(1/2)\nnew sample kalimba_a time(1/4)\n\n// Try changing some of the time values to play with the polyrhythm",
  "111-chance": "// === TUTORIAL 111: Chance ===\n// Instead of a 1 (100%) or 0 (0%) in the play method, \n// we can also use a decimal-point value that represents\n// a percentage of chance that the sound will play\n\nset tempo 115\n\nnew sample hat_808 time(1/16) play(0.6)\n// play hat 60% of the time\n\nnew sample kick_808_long time(1/8) play(0.3)\n// play kick 30% of the time\n\nnew sample snare_808 time(1/2)\n// by default the sound is played 100% of the time\n\n// Try some different percentages with values between 0 and 1",
  "112-chance-list": "// === TUTORIAL 112: Chance List ===\n// It is also possible to add these chances in a list\n// This helps to create more complex rhythms with small variations\n\nlist hatBeat [1 0.1 0.9 0.2]\nnew sample hat_909 time(1/16) play(hatBeat)\n// plays 100%, 10%, 90% and 20% in a sequence\n\nlist kickBeat [1 0.05]\nnew sample kick_909 time(1/4) play(kickBeat)\n// plays 90% and then 5% of the time\n\nnew sample clap_909 time(1 7/8)\n\n// Try to make other lists of probabilities",
  "113-speed": "// === TUTORIAL 113: Speed ===\n// With the playback speed you do not affect the tempo, \n// but instead the pitch of the sound (higher or lower)\n// You can use this to create melodic like patterns\n\nlist pitch [1 0.5 0.25 1 2]\nnew sample pluck_a time(1/8) speed(pitch)\n\n// Try some different values like 0.3, 1.8, 3.14, 11.16",
  "114-soundscape": "// === TUTORIAL 114: Soundscape ===\n// We can combine multiple sounds with different \n// speeds to create a kind of soundscape\n\nnew sample gong_hi time(4) speed(0.3)\nnew sample bowl_hi time(3) speed(0.125)\nnew sample drone_cymbal time(7) speed(0.25)\n\n// Experiment with different time and speed values\n// You can use lists for the speed to even more create variations",
  "115-shape": "// === TUTORIAL 115: Shape ===\n// Some samples sound quite long. We can make longer samples \n// shorter with the shape() method, setting a fade-in \n// and fade-out time in milliseconds\n\nnew sample harp_down time(1/3) shape(1 100)\nnew sample bowl_hi time(1) shape(1000 2)\n\n// Try some different settings to hear the difference",
  "116-shape-list": "// === TUTORIAL 116: Shape List ===\n// We can also use a list to change the length of fade-in \n// and fade-out sequentially\n\nlist fadeIn [2 2 500]\nlist fadeOut [20 20 100 20 500]\nnew sample harp_down time(1/4) shape(fadeIn fadeOut)\n\n// Try some different values in the lists",
  "117-position": "// === TUTORIAL 117: Start Position ===\n// For longer samples it can be useful to start the playback \n// of the sound at a different position within the sample\n// You can do that with the start() function by giving a \n// value between 0 and 1 (0.5 is halfway through the sound)\n\nlist positions [0.7 0.2 0.3 0.2 0.5 0.1]\nnew sample choir_01 time(1/8) start(positions) shape(1 100 1)\n\n// The list contains different starting positions in % of \n// the length of the sound",
  "118-panning": "// === TUTORIAL 118: Panning ===\n// We can make the composition sound more interesting by using the \n// stereo field from our speakers (called panning).\n// We can place a sound left with -1, right with 1 and center with 0\n\nnew sample violin_c time(1) pan(-1)\nnew sample pluck_e time(1 3/16) pan(1)\nnew sample bamboo_g time(1 4/16) pan(0)\n\n// Try some different values for the panning between -1 and 1",
  "119-panning-list": "// === TUTORIAL 119: Panning List ===\n// Is with many functions we've seen so far we can also \n// use a list for the panning. Or use the argument 'random' \n// to randomize the panning\n\nlist panning [-1 -0.75 -0.5 -0.25 0 0.25 0.5 0.75 1]\nnew sample hat_808 time(1/16) pan(panning)\n// this sound will move from left to right\n\nnew sample tabla_mid time(1/4) pan(random)\n// this sound will play at a random position in the stereofield",
  "120-volume": "// === TUTORIAL 20: Volume ===\n// Sometimes you want some sounds to sound louder or softer \n// than others. For this we can use the gain() method. \n// A gain of 0 is off, a gain of 1 is the original volume \n// of the soundfile, a gain of 2 is 2x louder (be careful!).\n\nnew sample wood_hit gain(0.8) pan(-1)\nnew sample scrape gain(0.6)\nnew sample wood_plate gain(0.7) pan(1)\n\n// Try some different values for the gain but be careful with\n// values above 1!",
  "121-volume-list": "// === TUTORIAL 21: Volume List ===\n// With a volume list we can change the volume over time\n// to create more dynamics in the sound and make it more \"human\"\n\nlist dynamics [0.1 0.4 0.9 0.3 0.15 0.8 0.7 0.1]\nlist sounds [tabla_hi tabla_hi_short tabla_mid]\nnew sample sounds time(1/16) gain(dynamics)\n\n// Try some different list values",
  "201-synth": "// === TUTORIAL 22 ===\n// Instead of playing samples we can also create \n// a synthesizer (synth) that generates a sound \n// based on various types of waveforms\n\nnew synth saw\n// new synth sine\n// new synth square\n// new synth triangle\n\n// Try these different types of synths",
  "202-synth-time": "// === TUTORIAL 23 ===\n// Many of the functions from the sample can\n// also be applied to the synth, for example with \n// the time() we can choose the time interval it is triggered at\n\nnew synth saw time(1/8)",
  "203-note": "// === TUTORIAL 24 ===\n// To choose a note to play for the synth we use\n// the note() function. This function expects a number\n// as a semitone (half-step) on the piano-keyboard.\n\nnew synth saw time(1) note(0)\nnew synth saw time(1 1/16) note(3)\nnew synth saw time(1 3/16) note(7)\n\n// Try different note numbers like: -5, 12, 3.14",
  "204-melody": "// === TUTORIAL 25 ===\n// Similar to how we create a list for a beat we can\n// also create a list of notes to create a melody\n\nset tempo 137\n\nlist theMelody [0 7 12 19 15 12 5 3 7 5 2]\nnew synth triangle time(1/16) note(theMelody)\n\n// Try some different values for the list",
  "205-octave": "// === TUTORIAL 26 ===\n// With a second argument in the note() function we can \n// choose an octave offset. Stepping up one octave is \n// equivalent to adding 12 to the semitone.\n\nset tempo 137\n\nlist theMelody [0 7 5 3 7 5 2]\nlist theOctaves [0 0 0 1 1 1 2 2]\nnew synth triangle time(1/16) note(theMelody theOctaves)",
  "206-synth-shape": "// === TUTORIAL 27 ===\n// The shape() method for the synth allows us to create\n// a longer or shorter sound. We can also set the shape(off),\n// resulting in a never stopping synth sound.\n\nnew synth triangle time(1/4) shape(5 100) note(0 1)\nnew synth triangle time(1) shape(off)",
  "207-synth-shape-list": "// === TUTORIAL 28 ===\n// Of course we can also use a list to modulate the length \n// from the fade-in and fade-out times\n\nlist fadeOut [50 50 100 10 200 500]\nnew synth saw time(1/16) shape(1 fadeOut)",
  "208-filter": "// === TUTORIAL 29 ===\n// The sound of the synth is still very crude. Most synths \n// therefore use a filter to change the color quality of the\n// resulting sound. This can be done with the fx(filter)\n\nnew synth saw time(1/16) fx(filter low 1200 0.6)\n// This filter removes high frequencies above 800Hz (lowpass)\n// And has a little resonance on the cutoff frequency\n// Resonance results in a whistling quality",
  "209-filter-modulation": "// === TUTORIAL 30 ===\n// We can modulate the cutoff frequency and the resonance\n// of the filter with lists\n\nlist cutoffs [200 400 700 1000]\nlist qs [0.3 0.3 0.3 0.3 0.8]\n\nnew synth saw time(1/16) fx(filter low cutoffs qs)",
  "210-super-synth": "// === TUTORIAL 31 ===\n// The super synth is a synth that uses multiple\n// waveforms at the same time with a small detuning\n\nnew synth saw time(1/16) super(0.142 3) shape(1 100)\n\n// Try different amount of voices: 3, 5, 11\n// Try different detunings: 1.021, 7.245, 12.032",
  "401-midi-note": "// === TUTORIAL 30 ===\n// We can also output MIDI notes from the browser to external\n// instruments or applications on the computer via WebMidi.\n// This allows us to use Mecruy for generative music while\n// other applications are handling the sound\n\nnew midi default time(1/8) note([0 3 7] 2) gain(0.8)\n// this will send a midi-note to the default device\n// a gain of 1 is a velocity of 127, 0.8 = 101",
  "402-midi-duration": "// === TUTORIAL 31 ===\n// With the length() method we can change the duration.\n// The duration of a midi-note is determined by the interval between \n// the note-on and note-off message in milliseconds\n\nnew midi default time(1/8) note(0 2) length([50 100 150 200])\n// the list in length() will send different durations\n",
  "403-midi-channel": "// === TUTORIAL 32 ===\n// We can change the midi-channel with the out() method\n\nnew midi default time(1/8) note(0 0) out(10)\n// channel 10 is the default drum channel in general midi\n",
  "404-midi-chord": "// === TUTORIAL 33 ===\n// By setting the chord() method to 'on' we can output\n// multiple notes at the same time to create a chord\n\nnew midi default time(1) note([[0 3 7 11]] 2) chord(on)\n// here the chord is created by making a list on the first\n// place within another list (otherwise the notes would be \n// played in order over time)",
  "405-midi-control": "// === TUTORIAL 34 ===\n// With the cc() method we can send control change messages\n// to the same device, to control other parameters\n// Add multiple cc() methods to make different messages\n\nnew midi default time(1/16) note(0 0) name(myMidi)\n\tset myMidi cc(10 [50 100]) cc(20 random(4 0 127))\n// Above are two cc() methods, one to control number 10, and \n// one to 20, both with different values to change. "
}
