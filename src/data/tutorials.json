{
  "-tutorials": "// Welcome to the Mercury Playground ^^\n// click \"play\" to execute the code\n// and adjust the code below:\n\nlist kickBeat [1 0.01 0.1 1 0]\nnew sample kick_house time(1/16) play(kickBeat)\n\nlist hatBeat euclid(16 7)\nnew sample hat_909 time(1/16) play(hatBeat) pan(0.5)\n\nnew sample snare_hvy time(1 3/4)\n\nlist positions sineFloat(16 6.523 0 0.6)\nlist pitch repeat([2 1 1 0.84 0.94] 16)\nnew sample chimes_l time(1/16) shape(1 70 5) name(stut)\n\tset stut offset(positions) pan(random) gain(1) speed(pitch)\n",
  "00-intro": "// === TUTORIAL 00 ===\n// Welcome to the Mercury tutorial ^^\n// These short files will teach you all of the basics on \n// what you can do with this language\n\n// Code starting with '//' are comments and are not part of the code\n// You can (un)comment coded lines with Alt+/ (or by removing the //)\n\n// Uncomment the line below and click 'play'\n// new sample harp_up time(1)\n// Now comment the line and click 'play' again",
  "01-sample": "// === TUTORIAL 01 ===\n// you can play a soundfile with 'new sample' \n// followed by the samplename, for example: kick_909\n// start with 'play' or Alt+Enter\n// stop with 'silence' or Alt+.\n\nnew sample kick_909\n// try some other sounds like: hat_909, chimes, kalimba_e",
  "02-time": "// === TUTORIAL 02 ===\n// You can change how often a sound is played\n// within one measure/bar.\n// 1/4 means 4 times per measure\n\nnew sample kick_909 time(1/4)\n// now try for example 1/8, 3/16, 5/32, 1/100",
  "03-sounds": "// === TUTORIAL 03 ===\n// You can use multiple sounds simply by \n// coding an extra line\n\nnew sample kick_909 time(3/8)\nnew sample hat_909 time(1/8)\nnew sample snare_909 time(1/2)\n\n// Try various time() values and add extra sounds",
  "04-tempo": "// === TUTORIAL 04 ===\n// You can change global settings like tempo\n// with the 'set' keyword\n\nset tempo 86\n\nnew sample kick_808_dist time(3/8)\nnew sample hat_808 time(1/16)\nnew sample snare_808 time(1/2)\n\n// Try for example tempo 86 for HipHop, or 162 for Drum'n'Bass",
  "05-offset": "// === TUTORIAL 05 ===\n// we can keep the time interval the same, but play \n// sounds at a different position in the bar\n// by using a second argument for the offset\n\nnew sample kalimba_g time(1)\nnew sample kalimba_a time(1 3/16)\nnew sample kalimba_e time(1 3/8)\n\n// Try different offsets like 1/16, 3/4, 1/32",
  "06-beat": "// === TUTORIAL 06 ===\n// With a list we can make more complex \n// patterns like a beat of 1's and 0's\n\nlist hatBeat [1 0 1 0 0 1 0 1]\nnew sample hat_808 time(1/16) play(hatBeat)\n\n// Try changing the values and length of the list \n// for example: [1 0 1 1 0]",
  "07-polymeter": "// === TUTORIAL 07 ===\n// We can create multiple rythms for different instruments \n// of different lengths to create a composite rhythm.\n// Here the rhythm of the hihat is 7 long, and the table 5.\n\nlist hatBeat [1 0 1 0 0 1 0]\nnew sample hat_909 time(1/16) play(hatBeat)\n\nlist tablaBeat [1 0 1 1 0]\nnew sample tabla_mid time(1/16) play(tablaBeat)\n\n// Try different rhythms combined with different times",
  "08-linear": "// === TUTORIAL 08 ===\n// We can also use a list of sound names \n// to let one sample play them sequencially\n\nlist sounds [kick_909 hat_909 snare_909 hat_909]\nnew sample sounds time(1/8)\n\n// Try adding or removing some sound names\n// for example add tabla_mid",
  "09-linear-beat": "// === TUTORIAL 09 ===\n// Now we can combine a list of sounds with a list of beats\n// and add an extra sample 1/4th of the time to make a steady beat\n\nset tempo 114\n\nlist sounds [hat_909 snare_909 hat_909 tabla_mid tabla_hi]\nlist beat [1 0 1 0 1 1]\nnew sample sounds time(1/16) play(beat)\n\nnew sample kick_909 time(1/4)\n\n// Try different combinations of beats, sounds, time",
  "10-polyrhythm": "// === TUTORIAL 10 ===\n// We can also create a polyrhythm with time()\n// a polyrhythm is a composite rhythm of different timing\n// intervals within a measure.\n\nnew sample kalimba_e time(1)\nnew sample kalimba_g time(1/3)\nnew sample kalimba_cis time(1/2)\nnew sample kalimba_a time(1/4)\n\n// Try changing some of the time values and play with the polyrhythm",
  "11-probability": "// === TUTORIAL 11 ===\n// Instead of a 1 (100%) or 0 (0%) in the play method, \n// we can also use a decimal-point value that represents\n// a percentage of probability that the sound will play\nset tempo 86\n\nnew sample hat_808 time(1/16) play(0.6)\n// plays 60% of the time\n\nnew sample kick_808_long time(1/8) play(0.2)\n// plays 90% of the time\n\nnew sample snare_808 time(1/2)\n\n// now try some different percentages with values between 0 and 1",
  "12-probability-list": "// === TUTORIAL 12 ===\n// It is also possible to add these probabilities to a list\n// in order to create more complex rhythms with slight variations\n\nlist hatBeat [0.1 0.1 0.9 1]\nnew sample hat_909 time(1/16) play(hatBeat)\n// plays 100%, 10%, 90% and 20% in a sequence\n\nlist kickBeat [1 0.05]\nnew sample kick_909 time(1/4) play(kickBeat)\n// plays 90% and then 5% of the time\n\n// Try to make other lists of probabilities",
  "13-speed": "// === TUTORIAL 13 ===\n// With the playback speed you do not affect the tempo, \n// but instead the pitch of the sound (higher or lower)\n// You can use this to create melodic like patterns\n\nlist pitch [1 0.5 0.25 1 2]\nnew sample bamboo_a time(1/8) speed(pitch)\n\n// Try some different values like 0.3, 1.8, 3.14, 11.16",
  "14-soundscape": "// === TUTORIAL 14 ===\n// We can combine multiple sounds with different \n// speeds to create a kind of soundscape\n\nnew sample gong_hi time(4) speed(-0.3)\nnew sample bowl_hi time(3) speed(-0.125)\nnew sample drone_cymbal time(7) speed(-0.5)\n\n// Experiment with different time and speed values\n// maybe even use lists for the speed to create variations",
  "15-shape": "// === TUTORIAL 15 ===\n// Some samples sound quite long. We can make longer samples \n// shorter with the shape() method, setting an fade-in \n// and fade-out time in milliseconds\n\nnew sample harp_down time(1/3) shape(1 500)\nnew sample bowl_hi time(1) shape(1000 2)\n\n// Try some different settings to hear the difference",
  "16-shape-list": "// === TUTORIAL 16 ===\n// We can also use a list to change the length of fade-in \n// and fade-out sequentially\n\nlist fadeIn [2 2 500]\nlist fadeOut [20 20 100 20 500]\nnew sample harp_down time(1/4) shape(fadeIn fadeOut)\n\n// Try some different lengths",
  "17-position": "// === TUTORIAL 17 ===\n// For longer samples it is sometimes interesting to start \n// the playback of the sound at a different position within the \n// sample. You can do that with the start() by giving a \n// value between 0 and 1 (0.5 is halfway through the sound)\n\nlist positions [0 0.2 0.3 0.2 0.5 0.1]\nnew sample choir_01 time(1/8) start(positions) shape(1 100 1)\n",
  "18-panning": "// === TUTORIAL 18 ===\n// We can make the composition more interesting by using the \n// stereo field from our speakers (called panning).\n// We can pan a sound left with -1, right with 1 and center with 0\n\nnew sample violin_c time(1) pan(-1)\nnew sample pluck_e time(1 3/16) pan(1)\nnew sample bamboo_g time(1 4/16) pan(0)\n\n// Try some different values for the panning between -1 and 1",
  "19-panning-list": "// === TUTORIAL 19 ===\n// Of course we can also use a list for the panning \n// or use the argument random to randomize the panning\n\nlist panning [-1 -0.75 -0.5 -0.25 0 0.25 0.5 0.75 1]\nnew sample tabla_mid time(1/16) pan(panning)\n// this sound will move from left to right\n\nnew sample tabla_hi time(1/16) pan(random)\n// this sound will play at a random position in the stereofield",
  "20-volume": "// === TUTORIAL 20 ===\n// Sometimes you want some sounds to sound louder or softer \n// than others. For this we can use the gain() method. \n// A gain of 0 is off, a gain of 1 is the original volume \n// of the soundfile.\n\nnew sample wood_hit gain(0.8) pan(-1)\nnew sample scrape gain(0.6)\nnew sample wood_plate gain(0.7) pan(1)",
  "21-volume-list": "// === TUTORIAL 21 ===\n// With a volume list we can change the amplitude \n// over time to create more dynamics in the sound.\n\nlist dynamics [0.1 0.4 0.9 0.3 0.15 0.8 0.7 0.1]\nlist sounds [tabla_hi tabla_hi_short tabla_mid]\nnew sample sounds time(1/16) gain(dynamics)",
  "30-midi-note": "// === TUTORIAL 30 ===\n// We can also output MIDI notes from the browser to external\n// instruments or applications on the computer via WebMidi.\n// This allows us to use Mecruy for generative music while\n// other applications are handling the sound\n\nnew midi default time(1/8) note([0 3 7] 2) gain(0.8)\n// this will send a midi-note to the default device\n// a gain of 1 is a velocity of 127, 0.8 = 101",
  "31-midi-duration": "// === TUTORIAL 31 ===\n// With the length() method we can change the duration.\n// The duration of a midi-note is determined by the interval between \n// the note-on and note-off message in milliseconds\n\nnew midi default time(1/8) note(0 2) length([50 100 150 200])\n// the list in length() will send different durations\n",
  "32-midi-channel": "// === TUTORIAL 32 ===\n// We can change the midi-channel with the out() method\n\nnew midi default time(1/8) note(0 0) out(10)\n// channel 10 is the default drum channel in general midi\n",
  "33-midi-chord": "// === TUTORIAL 33 ===\n// By setting the chord() method to 'on' we can output\n// multiple notes at the same time to create a chord\n\nnew midi default time(1) note([[0 3 7 11]] 2) chord(on)\n// here the chord is created by making a list on the first\n// place within another list (otherwise the notes would be \n// played in order over time)",
  "34-midi-control": "// === TUTORIAL 34 ===\n// With the cc() method we can send control change messages\n// to the same device, to control other parameters\n// Add multiple cc() methods to make different messages\n\nnew midi default time(1/16) note(0 0) name(myMidi)\n\tset myMidi cc(10 [50 100]) cc(20 random(4 0 127))\n// Above are two cc() methods, one to control number 10, and \n// one to 20, both with different values to change. "
}
